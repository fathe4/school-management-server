// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  firstName   String
  middleName  String
  lastName    String
  gender      String
  dateOfBirth String
  religion    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  userRoles             UserRoles[]
  UserAdditionalDetails UserAdditionalDetails[]
  Stuff                 Stuff?
  Student               Student[]
}

model Roles {
  roleId    String      @id @default(uuid())
  roleName  String
  createdAt DateTime    @default(now())
  updatedAt DateTime
  UserRoles UserRoles[]
}

model UserRoles {
  userId String
  roleId String

  user User  @relation(fields: [userId], references: [userId])
  role Roles @relation(fields: [roleId], references: [roleId])

  @@id([userId, roleId])
}

model UserAdditionalDetails {
  id                    String @id @default(uuid())
  userId                String
  address               String
  postalCode            Int
  city                  String
  country               String
  phoneNumber           String
  guardianName          String
  guardianContactNumber String

  user User @relation(fields: [userId], references: [userId])
}

model Student {
  userId     String @unique
  roll       Int
  classId    String
  sectionId  String
  groupId    String
  sessionId  String
  categoryId String

  user         User            @relation(fields: [userId], references: [userId])
  class        Class           @relation(fields: [classId], references: [classId])
  category     StudentCategory @relation(fields: [categoryId], references: [categoryId])
  session      Session         @relation(fields: [sessionId], references: [sessionId])
  group        Group           @relation(fields: [groupId], references: [groupId])
  section      Section         @relation(fields: [sectionId], references: [sectionId])
  staffRatings staffRatings[]

  @@id([roll, classId, sectionId, sessionId])
}

model StudentCategory {
  categoryId String    @id @default(uuid())
  title      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  Student    Student[]
}

model Session {
  sessionId        String    @id @default(uuid())
  title            String
  isCurrentSession Boolean
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  Student          Student[]
}

model Stuff {
  userId         String         @unique
  stuffId        String         @id
  isActive       Boolean
  designationId  String
  departmentId   String
  workExperence  Int
  qualification  String
  maritialStatus MaritialStatus @default(Unmarried)
  dateOfJoining  DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime

  user             User             @relation(fields: [userId], references: [userId])
  stuffDesignation StuffDesignation @relation(fields: [designationId], references: [id])
  stuffDepartment  StuffDepartment  @relation(fields: [departmentId], references: [id])
  staffRatings     staffRatings[]
}

enum MaritialStatus {
  Married
  Unmarried
}

model StuffDesignation {
  id          String   @id @default(uuid())
  designation String
  isActive    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Stuff       Stuff[]
}

model StuffDepartment {
  id         String   @id @default(uuid())
  department String
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Stuff      Stuff[]
}

model staffRatings {
  stuffId   String
  roll      Int
  classId   String
  sectionId String
  sessionId String
  rating Int
  description String
  status String
createdAt  DateTime @default(now())
  updatedAt  DateTime

  stuff   Stuff   @relation(fields: [stuffId], references: [stuffId])
  student Student @relation(fields: [roll, classId, sectionId, sessionId], references: [roll, classId, sectionId, sessionId])

  @@id([stuffId])
}

model Group {
  groupId   String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime

  subject      Subject[]
  ClassSection ClassSection[]
  Student      Student[]
}

model Subject {
  code        String
  groupId     String
  subjectName String
  SubjectType SubjectType @default(theory)

  group        Group          @relation(fields: [groupId], references: [groupId])
  ClassSubject ClassSubject[]

  @@id([code, groupId])
}

enum SubjectType {
  theory
  practical
}

model Building {
  buildingId String   @id @default(uuid())
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Room       Room[]
}

model Room {
  roomId     String   @id @default(uuid())
  buildingId String
  roomNumber String
  floor      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  building     Building       @relation(fields: [buildingId], references: [buildingId])
  ClassSection ClassSection[]
}

model Class {
  classId      String         @id @default(uuid())
  title        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  ClassSection ClassSection[]
  ClassSubject ClassSubject[]
  Student      Student[]
}

model Section {
  sectionId    String         @id @default(uuid())
  sectionName  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  ClassSection ClassSection[]
  ClassSubject ClassSubject[]
  Student      Student[]
}

model ClassSection {
  classId   String
  sectionId String
  roomId    String
  groupId   String

  class        Class          @relation(fields: [classId], references: [classId])
  section      Section        @relation(fields: [sectionId], references: [sectionId])
  room         Room           @relation(fields: [roomId], references: [roomId])
  group        Group          @relation(fields: [groupId], references: [groupId])
  ClassSubject ClassSubject[]

  @@id([classId, sectionId, roomId, groupId])
}

model ClassSubject {
  classId   String
  sectionId String
  roomId    String
  groupId   String
  subjectId String

  classSection     ClassSection     @relation(fields: [classId, sectionId, roomId, groupId], references: [classId, sectionId, roomId, groupId])
  subject          Subject          @relation(fields: [subjectId, groupId], references: [code, groupId])
  Class            Class?           @relation(fields: [classClassId], references: [classId])
  classClassId     String?
  Section          Section?         @relation(fields: [sectionSectionId], references: [sectionId])
  sectionSectionId String?
  ClassTimetable   ClassTimetable[]

  @@id([classId, sectionId, subjectId, groupId, roomId])
}

model ClassTimetable {
  classId   String
  sectionId String
  roomId    String
  groupId   String
  subjectId String
  staffId   String
  startTime DateTime
  endTime   DateTime
  dayOfWeek DayOfWeek
  createdAt DateTime
  updatedAt DateTime

  classSubject ClassSubject @relation(fields: [classId, sectionId, roomId, groupId, subjectId], references: [classId, sectionId, roomId, groupId, subjectId])

  @@id([classId, sectionId, subjectId, groupId, roomId])
}

enum DayOfWeek {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
