// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  firstName   String
  middleName  String
  lastName    String
  gender      String
  dateOfBirth String
  religion    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  userRoles             UserRoles[]
  UserAdditionalDetails UserAdditionalDetails[]
}

model Roles {
  roleId    String      @id @default(uuid())
  roleName  String
  createdAt DateTime    @default(now())
  updatedAt DateTime
  UserRoles UserRoles[]
}

model UserRoles {
  userId String
  roleId String

  user User  @relation(fields: [userId], references: [userId])
  role Roles @relation(fields: [roleId], references: [roleId])

  @@id([userId, roleId])
}

model UserAdditionalDetails {
  id                    String @id @default(uuid())
  userId                String
  address               String
  postalCode            Int
  city                  String
  country               String
  phoneNumber           String
  guardianName          String
  guardianContactNumber String

  user User @relation(fields: [userId], references: [userId])
}

model Group {
  groupId   String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime

  subject      Subject[]
  ClassSection ClassSection[]
}

model Subject {
  code        String
  groupId     String
  subjectName String
  SubjectType SubjectType @default(theory)

  group        Group          @relation(fields: [groupId], references: [groupId])
  ClassSubject ClassSubject[]

  @@id([code, groupId])
}

enum SubjectType {
  theory
  practical
}

model Building {
  buildingId String   @id @default(uuid())
  title      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Room       Room[]
}

model Room {
  roomId     String   @id @default(uuid())
  buildingId String
  roomNumber String
  floor      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  building     Building       @relation(fields: [buildingId], references: [buildingId])
  ClassSection ClassSection[]
}

model Class {
  classId      String         @id @default(uuid())
  title        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  ClassSection ClassSection[]
  ClassSubject ClassSubject[]
}

model Section {
  sectionId    String         @id @default(uuid())
  sectionName  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  ClassSection ClassSection[]
  ClassSubject ClassSubject[]
}

model ClassSection {
  classId   String
  sectionId String
  roomId    String
  groupId   String

  class   Class   @relation(fields: [classId], references: [classId])
  section Section @relation(fields: [sectionId], references: [sectionId])
  room    Room    @relation(fields: [roomId], references: [roomId])
  group   Group   @relation(fields: [groupId], references: [groupId])

  @@id([classId, sectionId, roomId, groupId])
}

model ClassSubject {
  classId   String
  sectionId String
  groupId   String
  subjectId String

  class   Class   @relation(fields: [classId], references: [classId])
  section Section @relation(fields: [sectionId], references: [sectionId])
  subject Subject @relation(fields: [subjectId, groupId], references: [code, groupId])

  @@id([classId, sectionId, subjectId, groupId])
}
